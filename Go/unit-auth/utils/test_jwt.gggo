package main

import (
	"errors"
	"fmt"
	"reflect"

	"github.com/golang-jwt/jwt/v5"
)

var token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiIiwiZW1haWwiOiJsaWFuZ2xlaV9jb29sQDE2My5jb20iLCJyb2xlIjoidXNlciIsImV4cCI6MTc1NDM2MzM0MiwibmJmIjoxNzU0Mjc2OTQyLCJpYXQiOjE3NTQyNzY5NDJ9.FNgHcHJAbrJmhmHOvdM257GQ3EzktQW9Ofl4LYU_EBk"

type Claims struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
	Role   string `json:"role"`
	jwt.RegisteredClaims
}

// 验证JWT Token
func ValidateToken(tokenString string) (*Claims, error) {
	claims := &Claims{}

	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return []byte("unit-auth-secret-verita-super20250801"), nil
	})

	if err != nil {
		return nil, err
	}

	if !token.Valid {
		return nil, errors.New("invalid token")
	}

	return claims, nil
}

// 递归打印结构体的所有字段
func printStruct(v interface{}, prefix string) {
	val := reflect.ValueOf(v)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	typ := val.Type()

	for i := 0; i < val.NumField(); i++ {
		field := val.Field(i)
		fieldType := typ.Field(i)

		if field.Kind() == reflect.Struct {
			fmt.Printf("%s%s:\n", prefix, fieldType.Name)
			printStruct(field.Interface(), prefix+"  ")
		} else {
			fmt.Printf("%s%s: %v\n", prefix, fieldType.Name, field.Interface())
		}
	}
}

func main() {
	claims, err := ValidateToken(token)
	if err != nil {
		fmt.Println("Error validating token:", err)
		return
	}

	fmt.Println("=== JWT Claims 详细信息 ===")
	printStruct(claims, "")

	fmt.Println("\n=== 完整 Claims 结构 ===")
	fmt.Printf("%+v\n", claims)
}
