package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
)

// 使用标准库而不是Gin框架
func main() {
	// 创建路由处理器
	http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{"status":"ok","message":"Pure HTTP server working"}`)
	})

	http.HandleFunc("/test", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{"message":"Pure test working","status":"success"}`)
	})

	http.HandleFunc("/api/v1/sso/providers", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{
			"code": 200,
			"message": "SSO providers from pure HTTP server",
			"data": [
				{"id": "local", "name": "local", "displayName": "本地账户"},
				{"id": "github", "name": "github", "displayName": "GitHub"},
				{"id": "google", "name": "google", "displayName": "Google"}
			]
		}`)
	})

	http.HandleFunc("/api/v1/sso/session/check", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{
			"code": 200,
			"message": "Session is valid",
			"data": {
				"is_authenticated": true,
				"session": {
					"session_id": "pure_session_123",
					"user_id": "pure_user",
					"is_active": true
				}
			}
		}`)
	})

	http.HandleFunc("/api/v1/sso/session/destroy", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{"code": 200, "message": "Session destroyed successfully"}`)
	})

	// 默认404处理器
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintf(w, `{
			"error": "Route not found",
			"message": "The requested route does not exist",
			"path": "%s",
			"method": "%s"
		}`, r.URL.Path, r.Method)
	})

	// 启动服务器
	port := os.Getenv("PORT")
	if port == "" {
		port = "8083"
	}

	log.Printf("Pure HTTP server starting on port %s", port)
	log.Printf("Available endpoints:")
	log.Printf("  GET  /health")
	log.Printf("  GET  /test")
	log.Printf("  GET  /api/v1/sso/providers")
	log.Printf("  GET  /api/v1/sso/session/check")
	log.Printf("  POST /api/v1/sso/session/destroy")

	log.Fatal(http.ListenAndServe(":"+port, nil))
}
