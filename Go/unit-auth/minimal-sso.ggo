package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
)

func main() {
	// 创建最简单的Gin服务器
	r := gin.New()

	// 添加必要的中间件
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	// 健康检查
	r.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status":  "ok",
			"message": "Minimal SSO server running",
		})
	})

	// 所有SSO接口都直接在根路由组中
	r.GET("/api/v1/sso/providers", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"code":    200,
			"message": "SSO providers retrieved successfully",
			"data": []map[string]interface{}{
				{
					"id":          "local",
					"name":        "local",
					"displayName": "本地账户",
				},
				{
					"id":          "github",
					"name":        "github",
					"displayName": "GitHub",
				},
				{
					"id":          "google",
					"name":        "google",
					"displayName": "Google",
				},
			},
		})
	})

	r.GET("/api/v1/sso/session/check", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"code":    200,
			"message": "Session is valid",
			"data": gin.H{
				"is_authenticated": true,
				"session": gin.H{
					"session_id": "test_session_123",
					"user_id":    "test_user",
					"is_active":  true,
				},
			},
		})
	})

	r.POST("/api/v1/sso/session/destroy", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"code":    200,
			"message": "Session destroyed successfully",
		})
	})

	// 启动服务器
	port := os.Getenv("PORT")
	if port == "" {
		port = "8082"
	}

	log.Printf("Minimal SSO server starting on port %s", port)
	log.Printf("Available endpoints:")
	log.Printf("  GET  /health")
	log.Printf("  GET  /api/v1/sso/providers")
	log.Printf("  GET  /api/v1/sso/session/check")
	log.Printf("  POST /api/v1/sso/session/destroy")

	if err := r.Run(":" + port); err != nil {
		log.Fatal("Failed to start server:", err)
	}
}
