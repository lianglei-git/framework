package main

import (
	"fmt"
	"log"
	"unit-auth/models"

	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

func main() {
	// 数据库连接信息
	dsn := "root:@tcp(localhost:3306)/unit_auth?charset=utf8mb4&parseTime=True&loc=Local"

	fmt.Println("🔄 连接到数据库...")
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		log.Fatal("❌ 连接数据库失败:", err)
	}

	fmt.Println("✅ 数据库连接成功")

	// 自动迁移数据库表
	fmt.Println("🔄 开始迁移表结构...")

	err = db.AutoMigrate(
		// 核心用户表
		&models.User{},
		&models.EmailVerification{},
		&models.PasswordReset{},
		&models.SMSVerification{},
		&models.UserStats{},
		&models.LoginLog{},
		&models.WeChatQRSession{},
		&models.RefreshToken{}, // 新增的Refresh Token表

		// SSO支持
		&models.SSOClient{},
		&models.SSOSession{},
		&models.TokenBlacklist{},

		// 中心化用户管理
		&models.Project{},
		&models.ProjectMapping{},
		&models.GlobalUserStats{},
		&models.AuthLog{},

		// 用户画像系统
		&models.UserProfile{},
		&models.UserBehavior{},
		&models.UserPreference{},
		&models.UserSegment{},
		&models.UserSegmentMapping{},

		// 权限管理系统
		&models.Role{},
		&models.Permission{},
		&models.RolePermission{},
		&models.UserRole{},
		&models.AccessControl{},
		&models.PermissionGroup{},
		&models.PermissionGroupItem{},
		&models.AuditLog{},

		// 数据同步机制
		&models.SyncTask{},
		&models.SyncLog{},
		&models.DataChange{},
		&models.SyncMapping{},
		&models.SyncConflict{},
		&models.SyncCheckpoint{},

		// 监控告警系统
		&models.Metric{},
		&models.MetricValue{},
		&models.AlertRule{},
		&models.Alert{},
		&models.Notification{},
		&models.NotificationTemplate{},
		&models.SystemHealth{},
		&models.PerformanceLog{},
	)

	if err != nil {
		log.Fatal("❌ 迁移失败:", err)
	}

	fmt.Println("✅ 所有表迁移成功")

	// 检查Refresh Token表是否存在
	var count int64
	if err := db.Model(&models.RefreshToken{}).Count(&count).Error; err != nil {
		fmt.Printf("⚠️  检查Refresh Token表失败: %v\n", err)
	} else {
		fmt.Printf("✅ Refresh Token表创建成功，当前记录数: %d\n", count)
	}

	// 显示所有表
	fmt.Println("\n📋 数据库表列表:")
	rows, err := db.Raw("SHOW TABLES").Rows()
	if err != nil {
		log.Fatal("❌ 获取表列表失败:", err)
	}
	defer rows.Close()

	for rows.Next() {
		var tableName string
		if err := rows.Scan(&tableName); err != nil {
			continue
		}
		if tableName == "refresh_tokens" || tableName == "users" || tableName == "sso_clients" {
			fmt.Printf("  ✅ %s\n", tableName)
		}
	}

	fmt.Println("\n🎉 数据库迁移完成！")
}
